package com.SchoolSchedule.demo.repository;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.SchoolSchedule.demo.entities.Agendamento;

@Repository
public class AgendamentoCustomRepository {
	private final EntityManager em;
	
	public AgendamentoCustomRepository(EntityManager em) {
		this.em = em;
	}
	
	public List<Agendamento> findByUserAndClass(Long idUser,Long idClass){
		Query q = em.createQuery("select A from Agendamento as A where A.sala=:salaID AND A.user=:userID",Agendamento.class);
		q.setParameter("salaID", idClass);
		q.setParameter("userID", idUser);
		return q.getResultList();
	}
	
	public Agendamento checkReservation(Integer registro,String dataTexto)throws Exception{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date dataIni = sdf.parse(dataTexto);
		Date dataFim = sdf.parse(dataTexto);
		String query = "select a from Agendamento a where a.user.registroEscolar = :registro and date_trunc('second',a.inicio) <= :dataIni and date_trunc('second',a.fim) >= :dataFim";
		return  em.createQuery(query, Agendamento.class).setParameter("registro", registro).setParameter("dataIni", dataIni).setParameter("dataFim", dataFim).getSingleResult();
	}
	
	public Agendamento validaAgendamento(Date inicio) {
		Agendamento agendamento = em.createNamedQuery("validaAgendamento",Agendamento.class).setParameter("inicio", inicio).getSingleResult();
	}
}
